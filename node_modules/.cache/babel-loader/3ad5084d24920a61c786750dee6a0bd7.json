{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nimport { EMPTY_EMPLOYEE } from \"src/utils/constants\";\nexport function useEmployees() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [employees, setEmployees] = useState(null);\n  const [currentEmployee, setCurrentEmployee] = useState(EMPTY_EMPLOYEE);\n  const fetchAll = useCallback(async () => {\n    const employeesData = await fetchWithCache(\"employees\");\n    setEmployees(employeesData);\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setEmployees(null);\n  }, []);\n  return {\n    data: employees,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(useEmployees, \"QB4rdezEKroirPJapIQH0Hvh3EA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","EMPTY_EMPLOYEE","useEmployees","fetchWithCache","loading","employees","setEmployees","currentEmployee","setCurrentEmployee","fetchAll","employeesData","invalidateData","data"],"sources":["/Users/jerrychen/Downloads/ramp-fe-challenge/src/hooks/useEmployees.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { Employee } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { EmployeeResult } from \"./types\"\nimport { EMPTY_EMPLOYEE } from \"src/utils/constants\"\n\nexport function useEmployees(): EmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [employees, setEmployees] = useState<Employee[] | null>(null)\n  const [currentEmployee, setCurrentEmployee] = useState<Employee | null>(EMPTY_EMPLOYEE)\n\n  const fetchAll = useCallback(async () => {\n    const employeesData = await fetchWithCache<Employee[]>(\"employees\")\n    setEmployees(employeesData)\n  }, [fetchWithCache])\n\n  const invalidateData = useCallback(() => {\n    setEmployees(null)\n  }, [])\n\n  return { data: employees, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,OAAO,SAASC,YAAT,GAAwC;EAAA;;EAC7C,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BJ,cAAc,EAAlD;EACA,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAoB,IAApB,CAA1C;EACA,MAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAkBE,cAAlB,CAAtD;EAEA,MAAMQ,QAAQ,GAAGX,WAAW,CAAC,YAAY;IACvC,MAAMY,aAAa,GAAG,MAAMP,cAAc,CAAa,WAAb,CAA1C;IACAG,YAAY,CAACI,aAAD,CAAZ;EACD,CAH2B,EAGzB,CAACP,cAAD,CAHyB,CAA5B;EAKA,MAAMQ,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCQ,YAAY,CAAC,IAAD,CAAZ;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,SAAR;IAAmBD,OAAnB;IAA4BK,QAA5B;IAAsCE;EAAtC,CAAP;AACD;;GAfeT,Y;UACsBF,c"},"metadata":{},"sourceType":"module"}